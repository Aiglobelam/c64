    DEFAULT Screen Memory layout based on value in reg #D018 (53272) 1101 0000 0001 1000
    DEFAULT Value @ that address is "0001 xxxx" which indicates that mem start at #0400
    1       5         10        15        20        25        30        35        40 
    |       |         |         |         |         |         |         |         |
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
0  |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 0) 1024-1063 $0400-$0427
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
1  |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 1) 1064-1103 $0428-$044F
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
2  |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 2) 1104-1143 $0450-$0477
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
3  |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 3) 1144-1183 $0478-$049F
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
4  |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 4) 1184-1223 $04A0-$04C7
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
5  |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 5) 1224-1263 $04C8-$04EF
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
6  |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 6) 1264-1303 $04F0-$0517
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
7  |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 7) 1304-1343 $0518-$53F
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
8  |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 8) 1344-1383 $0540-$0567
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
9  |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 9) 1384-1423 $0568-$058F
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
10 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 10) 1424-1463 $0590-$05B7
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
11 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 11) 1464-1503 $05B8-$05DF
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
12 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 12) 1504-1543 $05E0-$0607
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
13 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 13) 1544-1583 $0608-$062F
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
14 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 14) 1584-1623 $0630-$0657
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
15 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 15) 1624-1663 $0658-$067F
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
16 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 16) 1664-1703 $0680-$06A7
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
17 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 17) 1704-1743 $06A8-$06CF
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
18 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 18) 1744-1783 $06D0-$6F7
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-| 
19 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 19) 1784-1823 $06F8-$071F
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
20 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 20) 1824-1863 $0720-$0747
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
21 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 21) 1864-1903 $0748-$76F
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
22 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 22) 1904-1943 $0770-$0797
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
23 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 23) 1944-1983 $0798-$07BF
   |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
24 |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| 24) 1984-2023 $07C0-07E7
    |       |         |         |         |         |         |         |         |
    1       5         10        15        20        25        30        35        40 

------------
- Screen RAM 
------------
Default location: $0400-$07E7  1024 - 2023
The screen consits of 25 rows with 40 columns each => 1000 positions
Each position is 8 bits wide, value 0-255
1000 postions * 8 bits = 8000 bits to fill screen

------------------------
- RESOLUTION c64 320*200
------------------------
    * Each column is 8 bits wide 
    * There is 40 columns
    * There is 25 rows
        Horizontal resolution
            Each h-row is 8 * 40 bits wide
            Each h-row is 320    bits wide
        Vertical resolution:
            Each v-row is 8 * 25 bits wide
            Each v-row is 200    bits wide

############################################
# VIDEO BANK SELECTION #DD00               #
# @ 6526 Complex Interface Adapter Chip #2 #
# (CIA #2)                                 #
############################################

64 K of mem in c64
Vic can see 16K memory at a time
64K/16K = 4 => 4 memory banks

================================
= SELECT mem BANK for vic to use
================================

#DD00: To address which memory bank to use, set only 2 lowest bits of #DD00

- - - - - - - - - - - - - - - 
- - - - - - - - - - - - - - -
- - #DD00                 - -
- - %1101 1101 0000 0000  - -
- - 56576                 - -
- - - - - - - - - - - - - - -
- - - - - - - - - - - - - - -

    Obs line 1 is just to make sure that bits 0 and 1 of a specific register is set to 1 "outputs".
    That somehow make line 2 work... 
    But what I see the default on start up value at memory address 56578 #DD02 is 63 / #3F / 0011 1111
    That is those last two bits are already set to "1"

    LINE 1: POKE 56578, PEEK(56578) or 3 : REM Make sure bits 0 and 1 are set to 1 "aka" outputs

    This line is the actual formula choosing the memory bank to use
    (A) is one of several values
    252 => #FC => 1111 1100

    LINE 2: POKE 56576,(PEEK(56576) AND 252 OR A)

    IF DD00 is 1001 0111 => Two lowest bits are 11 => bank 0 is used
               1001 0111
           AND 1111 1100 (252)
           - - - - - - - 
               1001 0100 (last two bits are ZEROed out, others kept)

           OR  0000 0011 (A = 3)
           - - - - - - -
               1001 0111 (we set the last 2 bits to what A was set to)

    - - - - - - - - -
    - Value @ #DD00 -
    - - - - - - - - -
    A == 3 => %xxxx xx11 => bank 0 => $0000-$3fff     0 - 16383 => DEFAULT
    A == 2 => %xxxx xx10 => bank 1 => $4000-$7fff 16384 - 32767 (Char set not available at bank 1)
    A == 1 => %xxxx xx01 => bank 2 => $8000-$bfff 32768 - 49151
    A == 0 => %xxxx xx00 => bank 3 => $c000-$ffff 49152 - 65535 (Char set not available at bank 3)

    Value @ DD00 => PRINT PEEK(56576)
    Value @ DD00 => 151
    Value @ DD00 => #97
    Value @ DD00 => 9    7
    Value @ DD00 => 1001 0111
                 => Two lowest bits are 11
                 => bank 0 is used
                 => This is the DEFAULT bank 0 => $0000-$3fff => 0 - 16383

###########################################
# VIC CHIP - and its 47 Control registers #
# @ #D000 -> #D02E                        #
# @ 53248 -> 53294                        #
# %1101 0000 0000 0000                    #
# %1101 0000 0010 1110                    #
###########################################

#D018 Memory setup register. Memory Control Register. (Screen Memory, Char memory)

- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - #D018               - -
- - 1101 0000 0001 1000 - -
- - 53272               - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -

    Value @ D018 => xxxx xxxx (8 bits) 
    Value @ D018 => 7654 3210 (8 bits) 

    Bits 7654 => Video Matrix Base Address (inside VIC)
              => That is the location of the screen memory

    OBS yes bit 3 is used 2 times pending on mode...

    Bits    3 => Bitmap-Mode: Select Base Address
              => some how set Base memory address when in bit map mode I guess

    Bits  321 => Character Dot-Data Base Address
              => some how set Base memory address when in text mode I guess

    Bits    0 => Unused

    value @ D018 => PRINT PEEK(53272)
    value @ D018 => 21
    value @ D018 => #15
    value @ D018 => 0001 0101
                 => 7654 3210 => 4 upper bits 7654 Video Matrix Base Address (inside VIC)
                 => 0001 xxxx => this 1 is worth (16) in decimal
                 => 0001 xxxx => is the DEFAULT value in a C64 on startup

===============================
= Set location of SCREEN MEMORY
===============================

    * DEFAULT start at #0400

    POKE 53272, (PEEK(53272) AND 15) OR A

    * Manipulate 4 highest bits of #D018 (bit 7,6,5 and 4)
    * DEFAULT Value @ #D018 on C64 startup => 21, #15, 0001 0101 => highest bits 0001

    * AND 15 => 15, #0F, 0000 1111 => 0 out 4 highest bits, keep 4 lowest

    * There are 4 banks of memory of each 16K of mem in the C64 (16 * 4 = 64K)
    * The default bank  of memory => bank 0 
      => addresses $0000-$3fff => 0-16383 => DEFAULT
      => we can use 16384 addresses
      => at each address we can store one byte, 8 bits

    * The screen consists of 25 rows with 40 columns each => 1000 positions
    * And in beach bank 0/1/2/3 of 16K memory we have place for 16 ranges of 1000 positions
    * That is we can place the start of our screen memory at 16 starting positions
    * Default stating position is bank 0 => $0000-$3fff => 0 - 16383

    (1) #0000 - #03FF (1000 positions + 24)

      IF position 0 starts at #0000 position 999 is at #03E7 then there comes 24 more positions!?
      01-03E8, 02-03E9, 03-03EA, 04-03EB, 05-03EC, 06-03ED, 07-03EE, 08-03FF, 09-03F0, 10-03F1,
      11-03F2, 12-03F3, 13-03F4, 14-03F5, 15-03F6, 16-03F7, 17-03F8, 18-03F9, 19-03FA, 20-03FB,
      21-03FC, 22-03FD, 23-03FE, 24-03FF
      Then comes #0400

    (2) #0400 - #07FF (1000 positions DEFAULT location + 24)

      IF position 0 starts at #0400 position 999 is at #07E7 then there comes 24 more positions!?
      01-07E8, 02-07E9, 03-07EA, 04-07EB, 05-07EC, 06-07ED, 07-07EE, 08-07EF, 09-07F0, 10-07F1,
      11-07F2, 12-07F3, 13-07F4, 14-07F5, 15-07F6, 16-07F7, 17-07F8, 18-07F9, 19-07FA, 20-07FB,
      21-07FC, 22-07FD, 23-07FE, 24-07FF
      Then comes #0800

    (3) #0800 - #0BFF (1000 + 24 positions)
    (4) #0C00 - #0FFF (1000 + 24 positions)
    (5) #1000 - #13FF (1000 + 24 positions)
    ... unt so weiter
    (16) #3C00 - #3FFF (1000 + 24 positions)

    * In our function below variable (A) can have 16 valid values
    * Each of these 16 values/positions is a range of 1000 addresses
    * That is 1/16 available address space of the current selected video bank for vic chip
    * Valid values of A => 0,(16),32,48,64,80,96,112,128,144,160,176,192,208,224,240
    * A=16 is the default value on C64v startup

    POKE 53272, (PEEK(53272) AND 15) OR A

           0001 0101 (Value @ #D018)
       AND 0000 1111 (AND 15)
       - - - - - - - - - - - -
           0000 0101 (Zero out 4 high/upper bits, keep current values for lowest 4 bits)
                     (Remember? It is only the 4 high bits that decide start of screen mem)

    (1) #0000 - #03FF

           0000 0101
       OR  0000 0000 (A=0)
       - - - - - - -
           0000 0101
           7654 xxxx RESULT means 4 high bits 0000 => SCREEN MEMORY @ #0000

    (2) #0400 - #07FF

           0000 0101
       OR  0001 0000 (A=16) DEFAULT
       - - - - - - -        
           0001 0101
           7654 xxxx RESULT means 4 high bits 0001 => SCREEN MEMORY @ #0400 DEFAULT location

    (3) #0800 - #0BFF

           0000 0101
       OR  0010 0000 (A=32)
       - - - - - - -        
           0010 0101
           7654 xxxx RESULT means 4 high bits 0010 => SCREEN MEMORY @ #0800

    (16) #3C00 - #3FFF

           0000 0101
       OR  1111 0000 (A=240)
       - - - - - - -        
           1111 0101
           7654 xxxx RESULT means 4 high bits 1111 => SCREEN MEMORY @ #3C00

    So when we have set where screen memory should start, that position is the first position
    Then there comes 999 more so we get 1000, and then there are those 24 extra positions...

- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - #D011               - -
- - 1101 0000 0001 0001 - -
- - 53265               - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -

    Screen control register
    Defaults to value #1B aka %0001 1011 aka 27 

    Bit #0-#2: Vertical raster scroll.
    Bit #3: Screen height; 
            0 = 24 rows; 
    	1 = 25 rows.
    Bit #4: 0 = Screen off, complete screen is covered by border; 
            1 = Screen on, normal screen contents are visible.
===> Bit #5: 0 = Text mode;
===>         1 = Bitmap mode.
    Bit #6: 1 = Extended background mode on.
    Bit #7: Read: Current raster line (bit #8).
            Write: Raster line to generate interrupt at (bit #8).

    value @ D011 => print peek(53265)
    value @ D011 => 27
    value @ D011 => #1B
    Value @ D011 => 0001 1011
                 => 76x4 3210
                 => x = Bit 5 
                 => x = 0
                 => Text mode is activated

=====================
= Turn on BITMAP MODE
=====================

    poke 53265, peek(53265) or 32
    poke 53265, 0001 1011   or 32 (bit 5 is 0)

            0001 1011
         OR 0010 0000 (32)
         - - - - - - -
	    0011 1011
            76x4 3210 => Bit 5(x) is now 1 => Bit map mode is on

=====================
= Turn on TEXT   MODE
=====================

    poke 53265, peek(53265) and 223
    poke 53265, 0011 1011   and 223 (bit 5 is 1 if bit map mode is on)
            
            0011 1011
        AND 1101 1111 (zero out high 8 bits, keep low 8 except bit 5)
        - - - - - - -
            0001 0001
              54 3210 => Bit 5 is 0 => Bit map off => text mode on

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<> COLORS
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

(+) Standard High resolution graphics

   Char mode 8x8 matrix

    7 6 5 4 3 2 1 0
   7 . . . . . . . .
   6 . . . . . . . .
   5 . . . . . . . .
   4 . . . . . . . .
   3 . . . . . . . .
   2 . . . . . . . .
   1 . . . . . . . .
   0 . . . . . . . .

   Color Background 
   Color Forground
	
      1 = On  = Colored with chosen character color for that screen position
      0 = Off = Colored with the color of the "screen"

(+) Multi color mode

   4 colors for each dot

   1) Color Screen     AKA "screen color" background color register #0 #D021 53281
   2) Color Background AKA color in       background color register #1 #D022 53282
   3) Color Background AKA color in       background color register #2 #D023 53283
   4) Color Character  AKA Character color 

   - - - - - - - - - - - - - -
   - - - - - - - - - - - - - -
   - - #D016               - -
   - - 1101 0000 0001 0110 - -
   - - 53270               - -
   - - - - - - - - - - - - - -
   - - - - - - - - - - - - - -

   #D016/53270: Screen control register #2.
   Notice #D011 is Screen control register #1.
   Defat value @ #D016 => #C8 => 1100 1000 => 200
                          (Bits) 7654 3210

   Bit 0: Horizontal raster scroll
   Bit 1: Horizontal raster scroll
   Bit 2: Horizontal raster scroll
   Bit 3: Screen width: 0 = 38 columns, 1 = 40 columns
   Bit 4: 1 = Multi color mode on, 0 = Multi color mode off
   Bit 5: ?
   Bit 6: ?
   Bit 7: ?

(+) Extended background color mode

   Only first 64 chars in Char ROM can be used
   Set background/foreground color of each char
   Foreground: Set in color RAM
   Background: ...
   TODO: read mote about this mode...

====================================
= Turn on multi color CHARACTER mode
====================================

   poke 53270, peek(53270) or 16

      1100 1000 (200 / #C8 : Default value @ #D016)
   OR 0001 0000 (16, turn bit 4 ON/1, leave rest of bits as they were)
   - - - - - - -
      1101 1000

=====================================
= Turn off multi color CHARACTER mode
=====================================

   poke 53270, peek(53270) and 239

       1101 1000 (200 / #C8 : Default value @ #D016 + multi color on)
   AND 1110 1111 (239, turn bit 4 Off/0, leave rest as they were)
   - - - - - - -
       ...0 ....


"IMAGE A"

  76543210
  ||||||||
7-00011000 ...11... (0): Screen Color @ #D021/53281 (background color register #0)
6-00111100 ..1111.. (1): Color char   @ #D800+index / 55296+index (lower 3 bits)
5-01100110 .11..11.
4-01111110 .111111.
3-01100110 .11..11.
2-01100110 .11..11.
1-01100110 .11..11.
0-00000000 ........

"IMAGE A"

  76 54 32 10
  || || || ||
7-00 01 10 00 (00): Screen Color     @ #D021/53281 (background color register #0)
6-00 11 11 00 (01): Color background @ #D022/53282 (background color register #1)
5-01 10 01 10 (10): Color background @ #D023/53283 (background color register #2)
4-01 11 11 10 (11): Color char       @ #D800+index / 55296+index (lower 3 bits)
3-01 10 01 10       Char foreground color is "11", for sprites it is "10"
2-01 10 01 10
1-01 10 01 10
0-00 00 00 00


100 poke 53281,1                  // White "Screen Color"
110 poke 53282,3                  // Cyan  "
120 poke 53283,8                  // Orange
130 poke 53270, peek(53270) or 16 // Turn on multi color mode 
140 c=13*4096+8*256               // 55296 aka #D800, start char color mem RAM
150 printchr$(147)"aaaaaaaaaa"    // 147 CLR HOME, then print 10 "a"
160 for i = 0 to 4                // for 0-4 (5 times)
170 poke c+i,8                    // char color orange!?, 8, "0000 1000" (only lower 3 bits)
180 next                          // "multi color black"            000 => Zero is black in c64


100 poke 53281,1
110 poke 53282,3
120 poke 53283,8
130 poke 53270, peek(53270) or 16
140 c=13*4096+8*256
150 printchr$(147)"aaaaaaaaaa"
160 for i = 0 to 4
170 poke c+i,8
180 next

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<> SPRITES
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

--------
- Color => in Bitmap mode
--------
* Colors are taken from the 1000 position screen memory (1024-2023)
* Each position is 8x8 64 bits
* u = upper 4 bits, if a bit is 1 it will have this color
* l = lower 4 bits, if a bit is 0 it will have this color
  1 2 3 4 5 6 7 8
1 u u u u . . . .
2 . . . . . . . .
3 . . . . . . . .
4 . . . . . . . .
5 . . . . . . . .
6 . . . . . . . .
7 . . . . . . . .
8 . . . . l l l l

---------
- Sprites 
---------
1 Sprite = 64 bytes
A Standard Sprite on c64 is 24x21=504
504 bits = 63 bytes => 503/8=63 
63 bytes per Sprite Shape, a trailin 0 Byte is added at the end.
64 bytes per Sprite Shape 

-----------------
- Sprite pointers
-----------------
Did you notice they are directyl after the Unused memory?
Sprite pointers are located at 2040-2047 $07F8-$07FF that is 8 Bytes
1) $07f8
2) $07f9
3) $07fa
4) $07fb
5) $07fc
6) $07fd
7) $07fe
8) $07ff

If 1) $07F8 points to/is set to #$00 data for sprite will be at pos $0000 in mem
If 1) $07F8 = #$01 data for sprite will be at pos $0040 in mem
If 1) $07F8 = #$02 data for sprite will be at pos $0080 in mem
If 1) $07F8 = #$03 data for sprite will be at pos $00C0 in mem
. . .
If 1) $07F8 = #$80 data for sprite will be at pos $2000 in mem

Formula: "sprite size in bytes" * "number stored in pointer" = "location in mem where sprite is"
Formula:         #$40           *              $80           = $2000 

-----------------
- Sprite Enablers
-----------------
Enable sprites register = $d015
If $d015 is $00 no sprites enabled         0000 0000
If $d015 is $01 sprite 1 is enabled        0000 0001
If $d015 is $02 sprite 2 is enabled        0000 0010
If $d015 is $03 sprite 1 and 2 are enabled 0000 0011
If $d015 is $04 sprite 3 is enabled        0000 0100
If $d015 is $05 sprite 1 and 3 are enabled 0000 0101
If $d015 is $06 sprite 2 and 3 are enabled 0000 0110
If $d015 is $07 sprite 1,2,3 are enabled   0000 0111
...
If $d015 is $ff sprite 1,2,3,4,5,6,7,8 are enabled 1111 1111

-------------------------
- Sprite positioning x,y
------------------------- 
1) $07f8 x:$d000, y:$d001
2) $07f9 x:$d002, y:$d003
3) $07fa x:$d004, y:$d005
4) $07fb x:$d006, y:$d007
5) $07fc x:$d008, y:$d009
6) $07fd x:$d00a, y:$d00b
7) $07fe x:$d00c, y:$d00d
8) $07ff x:$d00e, y:$d00f

$d010 move across all screen?

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<> Chars below just chars more chars and chars
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

==================================
= Set location of CHARACTER MEMORY
==================================

    * Manipulate bit 321 s of #D018
    * #D018 Memory setup register. Memory Control Register. (Screen Memory, Char memory) (see above...)
    * Char set consists of 256 chars, each char is 8 bytes
      7 6 5 4 3 2 1 0
    0 . . . . . . . . (8 bits = 1 byte)
    1 . . . . . . . .
    2 . . . . . . . .
    3 . . . . . . . .
    4 . . . . . . . .
    5 . . . . . . . .
    6 . . . . . . . .
    7 . . . . . . . .
    * 256 chars will take up 256x8 bytes = 2048 bytes of memory => 2 k
    * We have 16 k available in each bank => 16k/2k => 8 locations for a complete char set

    POKE 53272, (PEEK(53272) AND 240)     OR A

    OBS Character Generator Rom only available in VIC bank 0 and 2

    VIC Video BANK 0 => $0000-$3fff     0 - 16383 [16k] => DEFAULT
    VIC Video BANK 1 => $4000-$7fff 16384 - 32767 [16k] => (Char set NOT available at bank 1)
    VIC Video BANK 2 => $8000-$bfff 32768 - 49151 [16k] => 
    VIC Video BANK 3 => $c000-$ffff 49152 - 65535 [16k] => (Char set NOT available at bank 3)

If Selected VIC Video BANK 0 => $0000-$3fff (0 - 16383)         [16k] => DEFAULT 

    (1) POKE 53272, (PEEK(53272) AND 240) OR 0  => #0000 - #07FF [2k] (    0 -  2047 = 2048 locations)
    (2) POKE 53272, (PEEK(53272) AND 240) OR 2  => #0800 - #0FFF [2k] ( 2048 -  4095)
    (3) POKE 53272, (PEEK(53272) AND 240) OR 4  => #1000 - #17FF [2k] ( 4096 -  6143) DEFAULT Char Generator Rom
    (4) ...                                  6  => #1800 - #1FFF [2k] ( 6144 -  8191) DEFAULT Char Generator Rom
    (5) ...                                  8  => #2000 - #27FF [2k] ( 8192 - 10239
    (6) ...                                  10 => #2800 - #2FFF [2k] (10240 - 12287
    (7) ...                                  12 => #3000 - #37FF [2k] (12288 - 14335
    (8) POKE 53272, (PEEK(53272) AND 240) OR 14 => #3800 - #3FFF [2k] (14336 - 16383
                                                                							
If selected VIC Video BANK = 1 => start @ $4000 (16384)          [16k]

    (1) POKE 53272, (PEEK(53272) AND 240) OR 0  => #4000 - #47FF [2k] (16384 - 18431
    (2) POKE 53272, (PEEK(53272) AND 240) OR 2  => #4800 - #4FFF [2k] (18432 - 20479
    (3) POKE 53272, (PEEK(53272) AND 240) OR 4  => #5000 - #57FF [2k] (20480 - 22527 No char gen rom 
    (4) ...                                  6  => #5800 - #5FFF [2k] (22528 - 24575 No char gen rom
    (5) ...                                  8  => #6000 - #67FF [2k] (24576 - 26623
    (6) ...                                  10 => #6800 - #6FFF [2k] (26624 - 28671
    (7) ...                                  12 => #7000 - #77FF [2k] (28672 - 30719
    (8) POKE 53272, (PEEK(53272) AND 240) OR 14 => #7800 - #7FFF [2k] (30720 - 32767
                                                                    
If selected VIC Video BANK = 2 => start $8000 (32768)            [16k]

    (1) POKE 53272, (PEEK(53272) AND 240) OR 0  => #8000 - #87FF [2k] (32768 - 34815
    (2) POKE 53272, (PEEK(53272) AND 240) OR 2  => #8800 - #8FFF [2k] (34816 - 36863
    (3) ...                                  4  => #9000 - #97FF [2k] (36864 - 38911) Char Generator Rom
    (4) ...                                  6  => #9800 - #9FFF [2k] (38912 - 40959) Char Generator Rom
    (5) ...                                  8  => #A000 - #A7FF [2k] (40960 - 43007
    (6) ...                                  10 => #A800 - #AFFF [2k] (43800 - 45055
    (7) ...                                  12 => #B000 - #B7FF [2k] (45056 - 47103
    (8) POKE 53272, (PEEK(53272) AND 240) OR 14 => #B800 - #BFFF [2k] (47104 - 49151
                                                                        
If selected VIC Video BANK = 3 => Start $C000 (49152)            [16k]

    (1) POKE 53272, (PEEK(53272) AND 240) OR 0  => #C000 - #C7FF [2k] (49152 - 51199
    (2) POKE 53272, (PEEK(53272) AND 240) OR 2  => #C800 - #CFFF [2k] (51200 - 53247
    (3) POKE 53272, (PEEK(53272) AND 240) OR 4  => #D000 - #D7FF [2k] (53248 - 55295) No char gen rom 
    (4) ...                                  6  => #D800 - #DFFF [2k] (55296 - 57343) No char gen rom
    (5) ...                                  8  => #E000 - #E7FF [2k] (57344 - 59391)
    (6) ...                                  10 => #E800 - #EFFF [2k] (59392 - 61439)
    (7) ...                                  12 => #F000 - #F7FF [2k] (61440 - 63487)
    (8) POKE 53272, (PEEK(53272) AND 240) OR 14 => #F800 - #FFFF [2k] (63488 - 65535)
    
BUT !!!!! hmmm don't understand this yet...

OBS   Character ROM is actually @ #D000-#DFFF, VIC BANK 3 pos 3,4
OBS   Same positions as the VIC-II control registers
OBS   HOW IS THIS POSSIBLE???
OBS   VIC chip can switch in/out the Char ROM when it needs to
OBS   So either I/O (+ more) or Char ROM is at these locations

      ###########################################
      # VIC CHIP - and its 47 Control registers #
      # @ #D000 -> #D02E                        #
      # @ 53248 -> 53294                        #
      # %1101 0000 0000 0000                    #
      # %1101 0000 0010 1110                    #
      ###########################################
    
    (3) POKE 53272, (PEEK(53272) AND 240) OR 4  => #D000 - #D7FF [2k] (53248 - 55295) No char gen rom 
    	[512] => #D000 - #D1FF / #1000 - #11FF Upper case chars
        [512] => #D200 - #D3FF / #1200 - #13FF Graph chars
        [512] => #D400 - #D5FF / #1400 - #15FF Upper case reversed
        [512] => #D600 - #D7FF / #1600 - #17FF Graph chars reversed

    (4) POKE 53272, (PEEK(53272) AND 240) OR 6  => #D800 - #DFFF [2k] (55296 - 57343) No char gen rom
        [512] => #D800 - #D9FF / #1800 - #19FF Lower case chars
        [512] => #DA00 - #DBFF / #1A00 - #1BFF Upper case & graph chars?
        [512] => #DC00 - #DDFF / #1C00 - #1DFF Lower case reversed chars
        [512] => #DE00 - #DFFF / #1E00 - #1FFF Upper case reversed & graph?

OBS   When Char ROM is switched in instead of I/O, NO INTERUPTS ARE ALLOWED.
      Beacuse I/O is needed to take care of interupts when they happen.

     - - - - - - - - - - - - - -
     - - - - - - - - - - - - - -
     - - #DC0E (not vic reg) - -
     - - 1101 1100 0000 1110 - -
     - - 56334               - -
     - - - - - - - - - - - - - -
     - - - - - - - - - - - - - -

==========================
= TURN OFF INTERRUPTS
==========================
     POKE 56334, PEEK(56334) AND 254
     
     Start value @ 56334 => 1 = 0000 0001 => #01
     
         0000 0001
     AND 1111 1110 Keep all bits but the lsb
     - - - - - - - 
         0000 0000
	 
 ==========================
 = TURN ON INTERRUPTS
 ==========================
     POKE 56334, PEEK(56334) OR 1
     
        abcd efg0
     OR 0000 0001 Keep all bits and switch lsb no matter what value before
     - - - - - - -
        abcd efg1
	
 ==========================
 = SWITCH CHAR ROM IN
 ==========================
     Default Start value @ 1 => 55 = 0011 0111 => #37
     processor "bits" @ 1
     First 3 bits => config mem areas #A000 - #BFFF, #D000 - #DFFF, #E000 - #EFFF 
     7654 3210
     (1)   .... .x00 => RAM vissible @ #A000 - #BFFF, #D000 - #DFFF, #E000 - #EFFF 
     (2)   .... .x01 => RAM vissible @ #A000 - #BFFF,                #E000 - #EFFF 
     (3)   .... .x10 => RAM vissible @ #A000 - #BFFF,   kernal rom @ #E000 - #EFFF
     (4)   .... .x11 => BASIC ROM    @ #A000 - #BFFF,   kernal rom @ #E000 - #EFFF
     (5)   .... .0xx => CHAR ROM                    @ #D000 - #DFFF
     (5.1) .... .011 => CHAR ROM                    @ #D000 - #DFFF
     (5.2) .... .010 => CHAR ROM                    @ #D000 - #DFFF
     (5.3) .... .001 => CHAR ROM                    @ #D000 - #DFFF
     (5.4) .... .000 => NOPE see (1)
     (6)   .... .1xx => I/O vissible                @ #D000 - #DFFF
     
     POKE 1, PEEK(1) AND 251
     
         7654 3210
         0011 0111 (value @ 1)
     AND 1111 1011 (251)
     - - - - - - -
         0011 0011 Keep topmost 5 bits 7654 3, keep 2 lsb bits 10, and set bit 3 to ZERO
         .... .011 => (4)   .... .x11 => BASIC ROM  @ #A000 - #BFFF,      kernal rom @ #E000 - #EFFF
	           => (5.1) .... .011 => CHAR ROM                   @ #D000 - #DFFF
		   
 ==========================
 = SWITCH I/O IN AGAIN
 ==========================
     POKE 1, PEEK(1) OR 4 
        0011 0011
     OR 0000 0100
     - - - - - - -
        0011 0111 (back to default value @ 1)
	.... .111 => (4)   .... .x11 => BASIC ROM  @ #A000 - #BFFF,      kernal rom @ #E000 - #EFFF
	          => (6)   .... .1xx => I/O vissible                @ #D000 - #DFFF


##########################################
# Character generator ROM                #
# When I/O is switched out...            #
# @ #D000 - #D7FF [2k 2048 2048/8 = 256] #
# @ 53248 - 55295                        #
# @ 53248 - 57343 [4k 4096 4096/8 = 512] #
# @ #D000 - #DFFF                        #
##########################################

   * There exist 2 character sets a 256 bytes

   * A char consists of 8 bytes, Stored normally in ROM (Character generator ROM)

     7 6 5 4 3 2 1 0
   0 . . . . . . . . (8 bits = 1 byte)
   1 . . . . . . . . (Each . Is ON/OFF 1/0)
   2 . . . . . . . .
   3 . . . . . . . .
   4 . . . . . . . .
   5 . . . . . . . .
   6 . . . . . . . .
   7 . . . . . . . .

   Default: STANDARD CHARACTER MODE

      * Chars in ROM or RAM
      * Normally ROM
      * Define own special graphics for chars in RAM then tell VIC where to find them
      * Screen MEM => char code
      * Color RAM  => char color

   ============================================================================
   = To display a char in color on screen VIC chip does this calculation:     
   =
   = Char address = Screen Code * 8 + (Character set * 2048) + (Bank * 16384)
   =                        
   = Screen Code         : Char code to poke mem address with... ??? 
   =                       Do they mean 1 = A, 0 = @
   = Character set * 2048: Start of character mem
   = Bank                : ??? 0,1,2,3 ??? 
   ==============================================================================

   [@] #D000 - #D007, 53248 - 53255 => 8 bytes 8*8 bits = 64 bits
   [A] #D008 - #D00F, 53256 - 53263 => 8 bytes 8*8 bits = 64 bits
      7 6 5 4 3 2 1 0 
    0 . . . 1 1 . . . 0001 1000 #18  24 
    1 . . 1 1 1 1 . . 0011 1100 #3C  60
    2 . 1 1 . . 1 1 . 0110 0110 #66 102
    3 . 1 1 1 1 1 1 . 0111 1110 #7E 126
    4 . 1 1 . . 1 1 . 0110 0110 #66 102
    5 . 1 1 . . 1 1 . 0110 0110 #66 102
    6 . 1 1 . . 1 1 . 0110 0110 #66 102
    7 . . . . . . . . 0110 0110 #00   0
   [B] D010 - #
   [C]
   [D]
   [...]

   * Programmable Characters

============================
= Place character set in RAM
============================

   1) Pick already defined chars you want to use
   2) Own char set takes memory from BASIC
   3) Forbidden start locations:
      -    0: System stores important data here
      - 2048: BASIC programs start here
   4) Best locations
      - #3000, 12288

   Remember the VIC chip control register #D018? (See above :))
   - - - - - - - - - - -
   - #D018
   - 1101 0000 0001 1000
   - 53272
   - - - - - - - - - - -
   Memory setup register. Memory Control Register. (Screen Memory, Char memory)
   See Set location of SCREEN MEMORY above
   POKE 53272, (PEEK(53272) AND 15) OR A
   But now we want to set CHAR MEMORY

==================================
= Set location of CHARACTER MEMORY
==================================

   If Selected VIC Video BANK 0 => $0000-$3fff (0 - 16383)         [16k] => DEFAULT

    (1) POKE 53272, (PEEK(53272) AND 240) OR 0  => #0000 - #07FF [2k] (    0 -  2047 = 2048 locations)
    (2) POKE 53272, (PEEK(53272) AND 240) OR 2  => #0800 - #0FFF [2k] ( 2048 -  4095)
    (3) POKE 53272, (PEEK(53272) AND 240) OR 4  => #1000 - #17FF [2k] ( 4096 -  6143) DEFAULT Char Generator Rom
    (4) ...                                  6  => #1800 - #1FFF [2k] ( 6144 -  8191) DEFAULT Char Generator Rom
    (5) ...                                  8  => #2000 - #27FF [2k] ( 8192 - 10239
    (6) ...                                  10 => #2800 - #2FFF [2k] (10240 - 12287
    (7) POKE 53272, (PEEK(53272) AND 240) OR 12 => #3000 - #37FF [2k] (12288 - 14335
    (8) ...                                  14 => #3800 - #3FFF [2k] (14336 - 16383

ex 1) POKE 53272, (PEEK(53272) AND 240) + 12)

       0001 0101 (default @ 53272)
   AND 1111 0000 (240)
   - - - - - - - 
       0001 0000 (zero out 4 LSBs)
     + 0000 1100 (12)
     - - - - - -
       0001 1100 (16+8+4 = 28)

ex 2) POKE 53272, (PEEK(53272) AND 240) OR A
      POKE 53272, (PEEK(53272) AND 240) OR 12
   
       0001 0101 (default @ 53272)
   AND 1111 0000 (240)
   - - - - - - - 
       0001 0000 (zero out 4 LSBs)
    OR 0000 1100 (12)
    - - - - - - -
       0001 1100 (16+8+4 = 28)

   POKE 53272, (PEEK(53272) AND 240) + 12) <=> POKE 53272, (PEEK(53272) AND 240) OR 12

=====================
= Reduce BASIC memory
=====================

   Some how this moves the BASIC pointers for which mem locations it can use...???
   If we want to use address 3000???
   
   poke 52,48:poke 56,48:clr

========================
= Show free mem in Basic
========================

   print fre(0)-(sgn(fre(0))<0)*65545

============================
= Copy chars from ROM to RAM
============================

   Program moves chars form Char gen ROM to specified RAM locations

   5  printchr$(142)
   10 poke 52,48: poke 56,48: clr
   20 poke 56334, peek(56334) and 254
   30 poke 1, peek(1) and 251
   40 for i=0 to 511: poke i+12288, peek(i+53248): next
   50 poke 1, peek(1) or 4
   60 poke 56334, peek(56334) or 1
   70 end
   
   5  => switch to upper case char set (142), 147 => clear screen
   10 => reserve mem for your chars, make BASIC not overwrite them
   20 => turn off interrupts / keyscan interrupt timer
   30 => switch in char rom in (will be at #D000)
   40 => copy 512 chars from ROM 53248/#D000 to RAM 12288/#3000 => Best location for chars
   50 => switch in i/o
   60 => turn on interrupts / restart keyscan interrupt timer
   70 => end of pro

   DEBUG version =)
   
1  print"start, switch to uppercase..."
5  printchr$(142)
6  print"done, clear mem for chars"
7  for i=0 to 511: poke i+12288,0: next i
8  print"done, now move basic mem..."
10 poke 52,48: poke 56,48: clr
12 print"done, turn of interrupts"
20 poke 56334, peek(56334) and 254
22 print"done, switch in char rom to #d000"
30 poke 1, peek(1) and 251
32 print"done, copy from rom #d000 to ram #3000"
40 for i=0 to 511: poke i+12288, peek(i+53248) : next
42 print"done, switch back in i/o"
50 poke 1, peek(1) or 4
52 print"done, turn on interrupts again"
60 poke 56334, peek(56334) or 1
61 print"done, program halt."
62 print"try: poke 53272, (peek(53272) and 240) or 12"
70 end

   Set c64 to use newly defined charset at #3000
   
   poke 53272, (peek(53272) and 240) or 12
   
   =========================
   = Code for reverse @ sign
   =========================
   for i = 12288 to 12288+7:poke i, 255 - peek(i) : next



--------------------
- Color Memory / RAM => character aka text mode
--------------------
OBS Color Ram/Mem is only used to colorize screen jn in character mode (not in bitmap mode).
1000 Memory positions: $D800-$DBE7 55296 - 56295
Maps 1:1 with Screen RAM
Decide color in each position
A color RAM Byte "0000     0000" 
                 "Nibble Nibble"
                 "HIGH      LOW"
The lower (LOW) NIBBLE is used to set the forground color.
O16 colors available in C64, 16 colors can be can be described using only 4 bits
0  "0000 0000" #00 BLACK       (Bit 3: Off => Screen position will become standard high resolution mode)
1  "0000 0001" #01 WHITE       (Bit 3: Off => Screen position will become standard high resolution mode)
2  "0000 0010" #02 RED         (Bit 3: Off => Screen position will become standard high resolution mode)
3  "0000 0011" #03 CYAN        (Bit 3: Off => Screen position will become standard high resolution mode)
4  "0000 0100" #04 PURPLE      (Bit 3: Off => Screen position will become standard high resolution mode)
5  "0000 0101" #05 GREEN       (Bit 3: Off => Screen position will become standard high resolution mode)
6  "0000 0110" #06 BLUE        (Bit 3: Off => Screen position will become standard high resolution mode)
7  "0000 0111" #07 YELLOW      (Bit 3: Off => Screen position will become standard high resolution mode)
8  "0000 1000" #08 ORANGE      (Bit 3: On  => Screen position will become multi color)
9  "0000 1001" #09 BROWN       (Bit 3: On  => Screen position will become multi color)
10 "0000 1010" #0A PINK        (Bit 3: On  => Screen position will become multi color)
11 "0000 1011" #0B DARK KREY   (Bit 3: On  => Screen position will become multi color)
12 "0000 1100" #0C GREY        (Bit 3: On  => Screen position will become multi color)
13 "0000 1101" #0D LIGHT GREEN (Bit 3: On  => Screen position will become multi color)
14 "0000 1110" #0E LIGHT BLUE  (Bit 3: On  => Screen position will become multi color)
15 "0000 1111" #0F LIGHT GREY  (Bit 3: On  => Screen position will become multi color)
EX) Change color of letter at position "top     left" to white: POKE 55296,1
EX) Change color of letter at position "top    right" to white: POKE 55335,1
EX) Change color of letter at position "bottom  left" to white: POKE 56256,1
EX) Change color of letter at position "bottom right" to white: POKE 56295,1
